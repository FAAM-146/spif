<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.50.0 (0)
 -->
<!-- Title: Entity Relationship Diagram Pages: 1 -->
<svg width="2541pt" height="1369pt"
 viewBox="0.00 0.00 2541.00 1369.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1365)">
<title>Entity Relationship Diagram</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1365 2537,-1365 2537,4 -4,4"/>
<text text-anchor="middle" x="1266.5" y="-6.8" font-family="Times,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v0.7.0 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- v0.attributes.global_attributes.GlobalAttributes -->
<g id="node1" class="node">
<title>v0.attributes.global_attributes.GlobalAttributes</title>
<g id="a_node1"><a xlink:title="v0.attributes.global_attributes.GlobalAttributes&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;Conventions (str): NetCDF conventions followed by this file&#10; &#160;&#160;&#160;imager_groups (str): Space separated list of imager groups in this file&#10;">
<polygon fill="none" stroke="black" points="774,-1177 774,-1198 914,-1198 914,-1177 774,-1177"/>
<text text-anchor="start" x="778" y="-1184.8" font-family="Times,serif" font-weight="bold" font-size="14.00">GlobalAttributes</text>
<polygon fill="none" stroke="black" points="774,-1156 774,-1177 887,-1177 887,-1156 774,-1156"/>
<text text-anchor="start" x="786" y="-1162.8" font-family="Times,serif" font-size="14.00">Conventions</text>
<polygon fill="none" stroke="black" points="887,-1156 887,-1177 914,-1177 914,-1156 887,-1156"/>
<text text-anchor="start" x="890" y="-1162.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="774,-1135 774,-1156 887,-1156 887,-1135 774,-1135"/>
<text text-anchor="start" x="777" y="-1141.8" font-family="Times,serif" font-size="14.00">imager_groups</text>
<polygon fill="none" stroke="black" points="887,-1135 887,-1156 914,-1156 914,-1135 887,-1135"/>
<text text-anchor="start" x="890" y="-1141.8" font-family="Times,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- v0.attributes.group_attributes.CoreGroupAttributes -->
<g id="node2" class="node">
<title>v0.attributes.group_attributes.CoreGroupAttributes</title>
<g id="a_node2"><a xlink:title="v0.attributes.group_attributes.CoreGroupAttributes&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1632.5,-482 1632.5,-503 1822.5,-503 1822.5,-482 1632.5,-482"/>
<text text-anchor="start" x="1644" y="-489.8" font-family="Times,serif" font-weight="bold" font-size="14.00">CoreGroupAttributes</text>
<polygon fill="none" stroke="black" points="1632.5,-461 1632.5,-482 1719.5,-482 1719.5,-461 1632.5,-461"/>
<text text-anchor="start" x="1635.5" y="-467.8" font-family="Times,serif" font-size="14.00">group_type</text>
<polygon fill="none" stroke="black" points="1719.5,-461 1719.5,-482 1822.5,-482 1822.5,-461 1719.5,-461"/>
<text text-anchor="start" x="1722.5" y="-467.8" font-family="Times,serif" font-size="14.00">Literal[&#39;core&#39;]</text>
</a>
</g>
</g>
<!-- v0.attributes.group_attributes.GenericGroupAttributes -->
<g id="node3" class="node">
<title>v0.attributes.group_attributes.GenericGroupAttributes</title>
<g id="a_node3"><a xlink:title="v0.attributes.group_attributes.GenericGroupAttributes&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1999,-270 1999,-291 2197,-291 2197,-270 1999,-270"/>
<text text-anchor="start" x="2002" y="-277.8" font-family="Times,serif" font-weight="bold" font-size="14.00">GenericGroupAttributes</text>
<polygon fill="none" stroke="black" points="1999,-249 1999,-270 2086,-270 2086,-249 1999,-249"/>
<text text-anchor="start" x="2002" y="-255.8" font-family="Times,serif" font-size="14.00">group_type</text>
<polygon fill="none" stroke="black" points="2086,-249 2086,-270 2197,-270 2197,-249 2086,-249"/>
<text text-anchor="start" x="2089.5" y="-255.8" font-family="Times,serif" font-size="14.00">Literal[&#39;other&#39;]</text>
</a>
</g>
</g>
<!-- v0.attributes.group_attributes.ImagerGroupAttributes -->
<g id="node4" class="node">
<title>v0.attributes.group_attributes.ImagerGroupAttributes</title>
<g id="a_node4"><a xlink:title="v0.attributes.group_attributes.ImagerGroupAttributes&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;instrument_name (str): Short name of the instrument. May be the same as the group name.&#10; &#160;&#160;&#160;instrument_long_name (Optional[str]): Full descriptive name of the instrument.&#10; &#160;&#160;&#160;instrument_serial_number (Optional[str]): Serial number or instrument identifier. Default is None.&#10; &#160;&#160;&#160;instrument_firmware (Optional[str]): Instrument firmware version. Default is None.&#10; &#160;&#160;&#160;instrument_software (Optional[str]): Name and version of the data acquisition software interfacing with the instrument. Default is None.&#10; &#160;&#160;&#160;instrument_manufacturer (Optional[str]): Name of the instrument manufacturer. Default is None.&#10; &#160;&#160;&#160;platform (Optional[str]): Name of the platform on which the instrument is mounted. Default is None.&#10; &#160;&#160;&#160;raw_filenames (Optional[str]): List of raw filenames used to create this dataset. Default is None.&#10; &#160;&#160;&#160;references (Optional[str]): Link to webpage. publications, or other references for this instrument. Default is None.&#10;">
<polygon fill="none" stroke="black" points="1153.5,-767 1153.5,-788 1470.5,-788 1470.5,-767 1153.5,-767"/>
<text text-anchor="start" x="1218.5" y="-774.8" font-family="Times,serif" font-weight="bold" font-size="14.00">ImagerGroupAttributes</text>
<polygon fill="none" stroke="black" points="1153.5,-746 1153.5,-767 1348.5,-767 1348.5,-746 1153.5,-746"/>
<text text-anchor="start" x="1210.5" y="-752.8" font-family="Times,serif" font-size="14.00">group_type</text>
<polygon fill="none" stroke="black" points="1348.5,-746 1348.5,-767 1470.5,-767 1470.5,-746 1348.5,-746"/>
<text text-anchor="start" x="1351.5" y="-752.8" font-family="Times,serif" font-size="14.00">Literal[&#39;imager&#39;]</text>
<polygon fill="none" stroke="black" points="1153.5,-725 1153.5,-746 1348.5,-746 1348.5,-725 1153.5,-725"/>
<text text-anchor="start" x="1188" y="-731.8" font-family="Times,serif" font-size="14.00">instrument_name</text>
<polygon fill="none" stroke="black" points="1348.5,-725 1348.5,-746 1470.5,-746 1470.5,-725 1348.5,-725"/>
<text text-anchor="start" x="1399" y="-731.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="1153.5,-704 1153.5,-725 1348.5,-725 1348.5,-704 1153.5,-704"/>
<text text-anchor="start" x="1169.5" y="-710.8" font-family="Times,serif" font-size="14.00">instrument_long_name</text>
<polygon fill="none" stroke="black" points="1348.5,-704 1348.5,-725 1470.5,-725 1470.5,-704 1348.5,-704"/>
<text text-anchor="start" x="1363.5" y="-710.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-683 1153.5,-704 1348.5,-704 1348.5,-683 1153.5,-683"/>
<text text-anchor="start" x="1156.5" y="-689.8" font-family="Times,serif" font-size="14.00">instrument_serial_number</text>
<polygon fill="none" stroke="black" points="1348.5,-683 1348.5,-704 1470.5,-704 1470.5,-683 1348.5,-683"/>
<text text-anchor="start" x="1363.5" y="-689.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-662 1153.5,-683 1348.5,-683 1348.5,-662 1153.5,-662"/>
<text text-anchor="start" x="1175.5" y="-668.8" font-family="Times,serif" font-size="14.00">instrument_firmware</text>
<polygon fill="none" stroke="black" points="1348.5,-662 1348.5,-683 1470.5,-683 1470.5,-662 1348.5,-662"/>
<text text-anchor="start" x="1363.5" y="-668.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-641 1153.5,-662 1348.5,-662 1348.5,-641 1153.5,-641"/>
<text text-anchor="start" x="1176.5" y="-647.8" font-family="Times,serif" font-size="14.00">instrument_software</text>
<polygon fill="none" stroke="black" points="1348.5,-641 1348.5,-662 1470.5,-662 1470.5,-641 1348.5,-641"/>
<text text-anchor="start" x="1363.5" y="-647.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-620 1153.5,-641 1348.5,-641 1348.5,-620 1153.5,-620"/>
<text text-anchor="start" x="1159" y="-626.8" font-family="Times,serif" font-size="14.00">instrument_manufacturer</text>
<polygon fill="none" stroke="black" points="1348.5,-620 1348.5,-641 1470.5,-641 1470.5,-620 1348.5,-620"/>
<text text-anchor="start" x="1363.5" y="-626.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-599 1153.5,-620 1348.5,-620 1348.5,-599 1153.5,-599"/>
<text text-anchor="start" x="1220" y="-605.8" font-family="Times,serif" font-size="14.00">platform</text>
<polygon fill="none" stroke="black" points="1348.5,-599 1348.5,-620 1470.5,-620 1470.5,-599 1348.5,-599"/>
<text text-anchor="start" x="1363.5" y="-605.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-578 1153.5,-599 1348.5,-599 1348.5,-578 1153.5,-578"/>
<text text-anchor="start" x="1199.5" y="-584.8" font-family="Times,serif" font-size="14.00">raw_filenames</text>
<polygon fill="none" stroke="black" points="1348.5,-578 1348.5,-599 1470.5,-599 1470.5,-578 1348.5,-578"/>
<text text-anchor="start" x="1363.5" y="-584.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="1153.5,-557 1153.5,-578 1348.5,-578 1348.5,-557 1153.5,-557"/>
<text text-anchor="start" x="1213" y="-563.8" font-family="Times,serif" font-size="14.00">references</text>
<polygon fill="none" stroke="black" points="1348.5,-557 1348.5,-578 1470.5,-578 1470.5,-557 1348.5,-557"/>
<text text-anchor="start" x="1363.5" y="-563.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
</a>
</g>
</g>
<!-- v0.attributes.group_attributes.PlatformGroupAttributes -->
<g id="node5" class="node">
<title>v0.attributes.group_attributes.PlatformGroupAttributes</title>
<g id="a_node5"><a xlink:title="v0.attributes.group_attributes.PlatformGroupAttributes&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1617.5,-856 1617.5,-877 1837.5,-877 1837.5,-856 1617.5,-856"/>
<text text-anchor="start" x="1628" y="-863.8" font-family="Times,serif" font-weight="bold" font-size="14.00">PlatformGroupAttributes</text>
<polygon fill="none" stroke="black" points="1617.5,-835 1617.5,-856 1704.5,-856 1704.5,-835 1617.5,-835"/>
<text text-anchor="start" x="1620.5" y="-841.8" font-family="Times,serif" font-size="14.00">group_type</text>
<polygon fill="none" stroke="black" points="1704.5,-835 1704.5,-856 1837.5,-856 1837.5,-835 1704.5,-835"/>
<text text-anchor="start" x="1707.5" y="-841.8" font-family="Times,serif" font-size="14.00">Literal[&#39;platform&#39;]</text>
</a>
</g>
</g>
<!-- v0.attributes.variable_attributes.VariableAttributes -->
<g id="node6" class="node">
<title>v0.attributes.variable_attributes.VariableAttributes</title>
<g id="a_node6"><a xlink:title="v0.attributes.variable_attributes.VariableAttributes&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;standard_name (Optional[str]): Standard name for this variable. Default is None.&#10;">
<polygon fill="none" stroke="black" points="2319,-39 2319,-60 2533,-60 2533,-39 2319,-39"/>
<text text-anchor="start" x="2353" y="-46.8" font-family="Times,serif" font-weight="bold" font-size="14.00">VariableAttributes</text>
<polygon fill="none" stroke="black" points="2319,-18 2319,-39 2435,-39 2435,-18 2319,-18"/>
<text text-anchor="start" x="2322" y="-24.8" font-family="Times,serif" font-size="14.00">standard_name</text>
<polygon fill="none" stroke="black" points="2435,-18 2435,-39 2533,-39 2533,-18 2435,-18"/>
<text text-anchor="start" x="2438" y="-24.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset -->
<g id="node7" class="node">
<title>v0.models.dataset.Dataset</title>
<g id="a_node7"><a xlink:title="v0.models.dataset.Dataset&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="0.5,-1015 0.5,-1036 535.5,-1036 535.5,-1015 0.5,-1015"/>
<text text-anchor="start" x="237.5" y="-1022.8" font-family="Times,serif" font-weight="bold" font-size="14.00">Dataset</text>
<polygon fill="none" stroke="black" points="0.5,-994 0.5,-1015 88.5,-1015 88.5,-994 0.5,-994"/>
<text text-anchor="start" x="26" y="-1000.8" font-family="Times,serif" font-size="14.00">meta</text>
<polygon fill="none" stroke="black" points="88.5,-994 88.5,-1015 535.5,-1015 535.5,-994 88.5,-994"/>
<text text-anchor="start" x="265.5" y="-1000.8" font-family="Times,serif" font-size="14.00">DatasetMeta</text>
<polygon fill="none" stroke="black" points="0.5,-973 0.5,-994 88.5,-994 88.5,-973 0.5,-973"/>
<text text-anchor="start" x="8.5" y="-979.8" font-family="Times,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="88.5,-973 88.5,-994 535.5,-994 535.5,-973 88.5,-973"/>
<text text-anchor="start" x="252.5" y="-979.8" font-family="Times,serif" font-size="14.00">GlobalAttributes</text>
<polygon fill="none" stroke="black" points="0.5,-952 0.5,-973 88.5,-973 88.5,-952 0.5,-952"/>
<text text-anchor="start" x="3.5" y="-958.8" font-family="Times,serif" font-size="14.00">dimensions</text>
<polygon fill="none" stroke="black" points="88.5,-952 88.5,-973 535.5,-973 535.5,-952 88.5,-952"/>
<text text-anchor="start" x="221.5" y="-958.8" font-family="Times,serif" font-size="14.00">Optional[list[Dimension]]</text>
<polygon fill="none" stroke="black" points="0.5,-931 0.5,-952 88.5,-952 88.5,-931 0.5,-931"/>
<text text-anchor="start" x="19.5" y="-937.8" font-family="Times,serif" font-size="14.00">groups</text>
<polygon fill="none" stroke="black" points="88.5,-931 88.5,-952 535.5,-952 535.5,-931 88.5,-931"/>
<text text-anchor="start" x="91.5" y="-937.8" font-family="Times,serif" font-size="14.00">list[UnionType[ImagerGroup, PlatformGroup, GenericGroup]]</text>
<polygon fill="none" stroke="black" points="0.5,-910 0.5,-931 88.5,-931 88.5,-910 0.5,-910"/>
<text text-anchor="start" x="11.5" y="-916.8" font-family="Times,serif" font-size="14.00">variables</text>
<polygon fill="none" stroke="black" points="88.5,-910 88.5,-931 535.5,-931 535.5,-910 88.5,-910"/>
<text text-anchor="start" x="266" y="-916.8" font-family="Times,serif" font-size="14.00">list[Variable]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.attributes.global_attributes.GlobalAttributes -->
<g id="edge1" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.attributes.global_attributes.GlobalAttributes:w</title>
<path fill="none" stroke="black" d="M535,-984C608.08,-984 587.24,-1060.75 643,-1108 690.61,-1148.35 703.23,-1182.16 757.76,-1187.32"/>
<polyline fill="none" stroke="black" points="773,-1188 768,-1187.78 "/>
<polygon fill="black" stroke="black" points="767.23,-1182.74 766.78,-1192.73 764.78,-1192.64 765.23,-1182.65 767.23,-1182.74"/>
<polyline fill="none" stroke="black" points="768,-1187.78 763.01,-1187.55 "/>
<polygon fill="black" stroke="black" points="762.23,-1182.51 761.79,-1192.5 759.79,-1192.42 760.24,-1182.42 762.23,-1182.51"/>
<polyline fill="none" stroke="black" points="763.01,-1187.55 758.01,-1187.33 "/>
</g>
<!-- v0.models.dataset.DatasetMeta -->
<g id="node8" class="node">
<title>v0.models.dataset.DatasetMeta</title>
<g id="a_node8"><a xlink:title="v0.models.dataset.DatasetMeta&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;file_pattern (str): Canonical filename pattern for this dataset&#10; &#160;&#160;&#160;short_name (str): Unique short name for this dataset&#10; &#160;&#160;&#160;long_name (Optional[str]): Long descriptive name for this dataset. Default is None.&#10; &#160;&#160;&#160;description (Optional[str]): Description of this dataset. Default is None.&#10; &#160;&#160;&#160;references (Optional[list[tuple[str, str]]]): References for this dataset. Default is None.&#10;">
<polygon fill="none" stroke="black" points="696,-1340 696,-1361 992,-1361 992,-1340 696,-1340"/>
<text text-anchor="start" x="793" y="-1347.8" font-family="Times,serif" font-weight="bold" font-size="14.00">DatasetMeta</text>
<polygon fill="none" stroke="black" points="696,-1319 696,-1340 786,-1340 786,-1319 696,-1319"/>
<text text-anchor="start" x="700" y="-1325.8" font-family="Times,serif" font-size="14.00">file_pattern</text>
<polygon fill="none" stroke="black" points="786,-1319 786,-1340 992,-1340 992,-1319 786,-1319"/>
<text text-anchor="start" x="878.5" y="-1325.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="696,-1298 696,-1319 786,-1319 786,-1298 696,-1298"/>
<text text-anchor="start" x="699" y="-1304.8" font-family="Times,serif" font-size="14.00">short_name</text>
<polygon fill="none" stroke="black" points="786,-1298 786,-1319 992,-1319 992,-1298 786,-1298"/>
<text text-anchor="start" x="878.5" y="-1304.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="696,-1277 696,-1298 786,-1298 786,-1277 696,-1277"/>
<text text-anchor="start" x="702.5" y="-1283.8" font-family="Times,serif" font-size="14.00">long_name</text>
<polygon fill="none" stroke="black" points="786,-1277 786,-1298 992,-1298 992,-1277 786,-1277"/>
<text text-anchor="start" x="843" y="-1283.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="696,-1256 696,-1277 786,-1277 786,-1256 696,-1256"/>
<text text-anchor="start" x="700.5" y="-1262.8" font-family="Times,serif" font-size="14.00">description</text>
<polygon fill="none" stroke="black" points="786,-1256 786,-1277 992,-1277 992,-1256 786,-1256"/>
<text text-anchor="start" x="843" y="-1262.8" font-family="Times,serif" font-size="14.00">Optional[str]</text>
<polygon fill="none" stroke="black" points="696,-1235 696,-1256 786,-1256 786,-1235 696,-1235"/>
<text text-anchor="start" x="703" y="-1241.8" font-family="Times,serif" font-size="14.00">references</text>
<polygon fill="none" stroke="black" points="786,-1235 786,-1256 992,-1256 992,-1235 786,-1235"/>
<text text-anchor="start" x="789" y="-1241.8" font-family="Times,serif" font-size="14.00">Optional[list[tuple[str, str]]]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.models.dataset.DatasetMeta -->
<g id="edge2" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.models.dataset.DatasetMeta:w</title>
<path fill="none" stroke="black" d="M535,-1005C698.96,-1005 536.74,-1329.06 679.68,-1349.95"/>
<polyline fill="none" stroke="black" points="695,-1351 690.01,-1350.66 "/>
<polygon fill="black" stroke="black" points="689.36,-1345.6 688.67,-1355.58 686.68,-1355.44 687.36,-1345.46 689.36,-1345.6"/>
<polyline fill="none" stroke="black" points="690.01,-1350.66 685.02,-1350.31 "/>
<polygon fill="black" stroke="black" points="684.37,-1345.26 683.68,-1355.23 681.69,-1355.09 682.37,-1345.12 684.37,-1345.26"/>
<polyline fill="none" stroke="black" points="685.02,-1350.31 680.04,-1349.97 "/>
</g>
<!-- v0.models.dimension.Dimension -->
<g id="node9" class="node">
<title>v0.models.dimension.Dimension</title>
<g id="a_node9"><a xlink:title="v0.models.dimension.Dimension&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2027,-695 2027,-716 2170,-716 2170,-695 2027,-695"/>
<text text-anchor="start" x="2056" y="-702.8" font-family="Times,serif" font-weight="bold" font-size="14.00">Dimension</text>
<polygon fill="none" stroke="black" points="2027,-674 2027,-695 2073,-695 2073,-674 2027,-674"/>
<text text-anchor="start" x="2030" y="-680.8" font-family="Times,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="2073,-674 2073,-695 2170,-695 2170,-674 2073,-674"/>
<text text-anchor="start" x="2111" y="-680.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="2027,-653 2027,-674 2073,-674 2073,-653 2027,-653"/>
<text text-anchor="start" x="2036" y="-659.8" font-family="Times,serif" font-size="14.00">size</text>
<polygon fill="none" stroke="black" points="2073,-653 2073,-674 2170,-674 2170,-653 2073,-653"/>
<text text-anchor="start" x="2076" y="-659.8" font-family="Times,serif" font-size="14.00">Optional[int]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.models.dimension.Dimension -->
<g id="edge3" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.models.dimension.Dimension:w</title>
<path fill="none" stroke="black" d="M535,-962C583.1,-962 594.92,-967.44 643,-969 1010.36,-980.89 1103.93,-1002.01 1470,-969 1653.11,-952.49 1719.45,-989.77 1877,-895 1963.02,-843.26 1924.61,-722.17 2007.97,-707.47"/>
<polyline fill="none" stroke="black" points="2026,-706 2021.02,-706.41 "/>
<polygon fill="black" stroke="black" points="2019.61,-701.5 2020.43,-711.47 2018.43,-711.63 2017.62,-701.67 2019.61,-701.5"/>
<polyline fill="none" stroke="black" points="2021.02,-706.41 2016.03,-706.81 "/>
<ellipse fill="none" stroke="black" cx="2012.05" cy="-707.14" rx="4" ry="4"/>
</g>
<!-- v0.models.group.GenericGroup -->
<g id="node10" class="node">
<title>v0.models.group.GenericGroup</title>
<g id="a_node10"><a xlink:title="v0.models.group.GenericGroup&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1578.5,-312 1578.5,-333 1877.5,-333 1877.5,-312 1578.5,-312"/>
<text text-anchor="start" x="1672.5" y="-319.8" font-family="Times,serif" font-weight="bold" font-size="14.00">GenericGroup</text>
<polygon fill="none" stroke="black" points="1578.5,-291 1578.5,-312 1666.5,-312 1666.5,-291 1578.5,-291"/>
<text text-anchor="start" x="1604" y="-297.8" font-family="Times,serif" font-size="14.00">meta</text>
<polygon fill="none" stroke="black" points="1666.5,-291 1666.5,-312 1877.5,-312 1877.5,-291 1666.5,-291"/>
<text text-anchor="start" x="1731" y="-297.8" font-family="Times,serif" font-size="14.00">GroupMeta</text>
<polygon fill="none" stroke="black" points="1578.5,-270 1578.5,-291 1666.5,-291 1666.5,-270 1578.5,-270"/>
<text text-anchor="start" x="1586.5" y="-276.8" font-family="Times,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="1666.5,-270 1666.5,-291 1877.5,-291 1877.5,-270 1666.5,-270"/>
<text text-anchor="start" x="1685.5" y="-276.8" font-family="Times,serif" font-size="14.00">GenericGroupAttributes</text>
<polygon fill="none" stroke="black" points="1578.5,-249 1578.5,-270 1666.5,-270 1666.5,-249 1578.5,-249"/>
<text text-anchor="start" x="1581.5" y="-255.8" font-family="Times,serif" font-size="14.00">dimensions</text>
<polygon fill="none" stroke="black" points="1666.5,-249 1666.5,-270 1877.5,-270 1877.5,-249 1666.5,-249"/>
<text text-anchor="start" x="1681.5" y="-255.8" font-family="Times,serif" font-size="14.00">Optional[list[Dimension]]</text>
<polygon fill="none" stroke="black" points="1578.5,-228 1578.5,-249 1666.5,-249 1666.5,-228 1578.5,-228"/>
<text text-anchor="start" x="1589.5" y="-234.8" font-family="Times,serif" font-size="14.00">variables</text>
<polygon fill="none" stroke="black" points="1666.5,-228 1666.5,-249 1877.5,-249 1877.5,-228 1666.5,-228"/>
<text text-anchor="start" x="1726" y="-234.8" font-family="Times,serif" font-size="14.00">list[Variable]</text>
<polygon fill="none" stroke="black" points="1578.5,-207 1578.5,-228 1666.5,-228 1666.5,-207 1578.5,-207"/>
<text text-anchor="start" x="1597.5" y="-213.8" font-family="Times,serif" font-size="14.00">groups</text>
<polygon fill="none" stroke="black" points="1666.5,-207 1666.5,-228 1877.5,-228 1877.5,-207 1666.5,-207"/>
<text text-anchor="start" x="1669.5" y="-213.8" font-family="Times,serif" font-size="14.00">Optional[list[GenericGroup]]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.models.group.GenericGroup -->
<g id="edge4" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.models.group.GenericGroup:w</title>
<path fill="none" stroke="black" d="M535,-941C766.26,-941 489.25,-604.74 643,-432 802.04,-253.32 916.95,-298.73 1153,-260 1292.03,-237.19 1333.99,-223.23 1470,-260 1517.04,-272.72 1521.9,-311.58 1559.86,-320.95"/>
<polygon fill="black" stroke="black" points="1568.06,-321.88 1577.49,-327.47 1573.03,-322.44 1578,-323 1578,-323 1578,-323 1573.03,-322.44 1578.51,-318.53 1568.06,-321.88 1568.06,-321.88"/>
<ellipse fill="none" stroke="black" cx="1564.09" cy="-321.43" rx="4" ry="4"/>
</g>
<!-- v0.models.group.ImagerGroup -->
<g id="node11" class="node">
<title>v0.models.group.ImagerGroup</title>
<g id="a_node11"><a xlink:title="v0.models.group.ImagerGroup&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="643,-555 643,-576 1045,-576 1045,-555 643,-555"/>
<text text-anchor="start" x="791" y="-562.8" font-family="Times,serif" font-weight="bold" font-size="14.00">ImagerGroup</text>
<polygon fill="none" stroke="black" points="643,-534 643,-555 731,-555 731,-534 643,-534"/>
<text text-anchor="start" x="668.5" y="-540.8" font-family="Times,serif" font-size="14.00">meta</text>
<polygon fill="none" stroke="black" points="731,-534 731,-555 1045,-555 1045,-534 731,-534"/>
<text text-anchor="start" x="847" y="-540.8" font-family="Times,serif" font-size="14.00">GroupMeta</text>
<polygon fill="none" stroke="black" points="643,-513 643,-534 731,-534 731,-513 643,-513"/>
<text text-anchor="start" x="651" y="-519.8" font-family="Times,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="731,-513 731,-534 1045,-534 1045,-513 731,-513"/>
<text text-anchor="start" x="803.5" y="-519.8" font-family="Times,serif" font-size="14.00">ImagerGroupAttributes</text>
<polygon fill="none" stroke="black" points="643,-492 643,-513 731,-513 731,-492 643,-492"/>
<text text-anchor="start" x="646" y="-498.8" font-family="Times,serif" font-size="14.00">dimensions</text>
<polygon fill="none" stroke="black" points="731,-492 731,-513 1045,-513 1045,-492 731,-492"/>
<text text-anchor="start" x="797.5" y="-498.8" font-family="Times,serif" font-size="14.00">Optional[list[Dimension]]</text>
<polygon fill="none" stroke="black" points="643,-471 643,-492 731,-492 731,-471 643,-471"/>
<text text-anchor="start" x="662" y="-477.8" font-family="Times,serif" font-size="14.00">groups</text>
<polygon fill="none" stroke="black" points="731,-471 731,-492 1045,-492 1045,-471 731,-471"/>
<text text-anchor="start" x="734" y="-477.8" font-family="Times,serif" font-size="14.00">list[UnionType[CoreGroup, GenericGroup]]</text>
<polygon fill="none" stroke="black" points="643,-450 643,-471 731,-471 731,-450 643,-450"/>
<text text-anchor="start" x="654" y="-456.8" font-family="Times,serif" font-size="14.00">variables</text>
<polygon fill="none" stroke="black" points="731,-450 731,-471 1045,-471 1045,-450 731,-450"/>
<text text-anchor="start" x="842" y="-456.8" font-family="Times,serif" font-size="14.00">list[Variable]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.models.group.ImagerGroup -->
<g id="edge5" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.models.group.ImagerGroup:w</title>
<path fill="none" stroke="black" d="M535,-941C701.84,-941 487.16,-594.02 624.93,-567.59"/>
<polygon fill="black" stroke="black" points="633.04,-566.88 643.39,-570.48 638.02,-566.44 643,-566 643,-566 643,-566 638.02,-566.44 642.61,-561.52 633.04,-566.88 633.04,-566.88"/>
<ellipse fill="none" stroke="black" cx="629.05" cy="-567.23" rx="4" ry="4"/>
</g>
<!-- v0.models.group.PlatformGroup -->
<g id="node12" class="node">
<title>v0.models.group.PlatformGroup</title>
<g id="a_node12"><a xlink:title="v0.models.group.PlatformGroup&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1162.5,-930 1162.5,-951 1461.5,-951 1461.5,-930 1162.5,-930"/>
<text text-anchor="start" x="1253" y="-937.8" font-family="Times,serif" font-weight="bold" font-size="14.00">PlatformGroup</text>
<polygon fill="none" stroke="black" points="1162.5,-909 1162.5,-930 1250.5,-930 1250.5,-909 1162.5,-909"/>
<text text-anchor="start" x="1188" y="-915.8" font-family="Times,serif" font-size="14.00">meta</text>
<polygon fill="none" stroke="black" points="1250.5,-909 1250.5,-930 1461.5,-930 1461.5,-909 1250.5,-909"/>
<text text-anchor="start" x="1315" y="-915.8" font-family="Times,serif" font-size="14.00">GroupMeta</text>
<polygon fill="none" stroke="black" points="1162.5,-888 1162.5,-909 1250.5,-909 1250.5,-888 1162.5,-888"/>
<text text-anchor="start" x="1170.5" y="-894.8" font-family="Times,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="1250.5,-888 1250.5,-909 1461.5,-909 1461.5,-888 1250.5,-888"/>
<text text-anchor="start" x="1266" y="-894.8" font-family="Times,serif" font-size="14.00">PlatformGroupAttributes</text>
<polygon fill="none" stroke="black" points="1162.5,-867 1162.5,-888 1250.5,-888 1250.5,-867 1162.5,-867"/>
<text text-anchor="start" x="1165.5" y="-873.8" font-family="Times,serif" font-size="14.00">dimensions</text>
<polygon fill="none" stroke="black" points="1250.5,-867 1250.5,-888 1461.5,-888 1461.5,-867 1250.5,-867"/>
<text text-anchor="start" x="1265.5" y="-873.8" font-family="Times,serif" font-size="14.00">Optional[list[Dimension]]</text>
<polygon fill="none" stroke="black" points="1162.5,-846 1162.5,-867 1250.5,-867 1250.5,-846 1162.5,-846"/>
<text text-anchor="start" x="1173.5" y="-852.8" font-family="Times,serif" font-size="14.00">variables</text>
<polygon fill="none" stroke="black" points="1250.5,-846 1250.5,-867 1461.5,-867 1461.5,-846 1250.5,-846"/>
<text text-anchor="start" x="1310" y="-852.8" font-family="Times,serif" font-size="14.00">list[Variable]</text>
<polygon fill="none" stroke="black" points="1162.5,-825 1162.5,-846 1250.5,-846 1250.5,-825 1162.5,-825"/>
<text text-anchor="start" x="1181.5" y="-831.8" font-family="Times,serif" font-size="14.00">groups</text>
<polygon fill="none" stroke="black" points="1250.5,-825 1250.5,-846 1461.5,-846 1461.5,-825 1250.5,-825"/>
<text text-anchor="start" x="1253.5" y="-831.8" font-family="Times,serif" font-size="14.00">Optional[list[GenericGroup]]</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.models.group.PlatformGroup -->
<g id="edge6" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.models.group.PlatformGroup:w</title>
<path fill="none" stroke="black" d="M535,-941C807.33,-941 879.9,-941 1143.44,-941"/>
<polygon fill="black" stroke="black" points="1151.5,-941 1161.5,-945.5 1156.5,-941 1161.5,-941 1161.5,-941 1161.5,-941 1156.5,-941 1161.5,-936.5 1151.5,-941 1151.5,-941"/>
<ellipse fill="none" stroke="black" cx="1147.5" cy="-941" rx="4" ry="4"/>
</g>
<!-- v0.models.variable.Variable -->
<g id="node13" class="node">
<title>v0.models.variable.Variable</title>
<g id="a_node13"><a xlink:title="v0.models.variable.Variable&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1985,-141 1985,-162 2211,-162 2211,-141 1985,-141"/>
<text text-anchor="start" x="2065.5" y="-148.8" font-family="Times,serif" font-weight="bold" font-size="14.00">Variable</text>
<polygon fill="none" stroke="black" points="1985,-120 1985,-141 2073,-141 2073,-120 1985,-120"/>
<text text-anchor="start" x="2010.5" y="-126.8" font-family="Times,serif" font-size="14.00">meta</text>
<polygon fill="none" stroke="black" points="2073,-120 2073,-141 2211,-141 2211,-120 2073,-120"/>
<text text-anchor="start" x="2094" y="-126.8" font-family="Times,serif" font-size="14.00">VariableMeta</text>
<polygon fill="none" stroke="black" points="1985,-99 1985,-120 2073,-120 2073,-99 1985,-99"/>
<text text-anchor="start" x="1988" y="-105.8" font-family="Times,serif" font-size="14.00">dimensions</text>
<polygon fill="none" stroke="black" points="2073,-99 2073,-120 2211,-120 2211,-99 2073,-99"/>
<text text-anchor="start" x="2113" y="-105.8" font-family="Times,serif" font-size="14.00">List[str]</text>
<polygon fill="none" stroke="black" points="1985,-78 1985,-99 2073,-99 2073,-78 1985,-78"/>
<text text-anchor="start" x="1993" y="-84.8" font-family="Times,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="2073,-78 2073,-99 2211,-99 2211,-78 2073,-78"/>
<text text-anchor="start" x="2076" y="-84.8" font-family="Times,serif" font-size="14.00">VariableAttributes</text>
</a>
</g>
</g>
<!-- v0.models.dataset.Dataset&#45;&gt;v0.models.variable.Variable -->
<g id="edge7" class="edge">
<title>v0.models.dataset.Dataset:e&#45;&gt;v0.models.variable.Variable:w</title>
<path fill="none" stroke="black" d="M535,-920C682.52,-920 539.06,-369.68 643,-265 940.11,34.22 1157.86,-139.91 1578,-104 1710.41,-92.68 1747.01,-76.41 1877,-104 1921.76,-113.5 1930.63,-142.87 1966.9,-150.29"/>
<polygon fill="black" stroke="black" points="1975.04,-151.06 1984.58,-156.48 1980.02,-151.53 1985,-152 1985,-152 1985,-152 1980.02,-151.53 1985.42,-147.52 1975.04,-151.06 1975.04,-151.06"/>
<ellipse fill="none" stroke="black" cx="1971.06" cy="-150.68" rx="4" ry="4"/>
</g>
<!-- v0.models.group.GenericGroup&#45;&gt;v0.attributes.group_attributes.GenericGroupAttributes -->
<g id="edge13" class="edge">
<title>v0.models.group.GenericGroup:e&#45;&gt;v0.attributes.group_attributes.GenericGroupAttributes:w</title>
<path fill="none" stroke="black" d="M1877,-281C1925.32,-281 1941.08,-281 1982.78,-281"/>
<polyline fill="none" stroke="black" points="1998,-281 1993,-281 "/>
<polygon fill="black" stroke="black" points="1992,-276 1992,-286 1990,-286 1990,-276 1992,-276"/>
<polyline fill="none" stroke="black" points="1993,-281 1988,-281 "/>
<polygon fill="black" stroke="black" points="1987,-276 1987,-286 1985,-286 1985,-276 1987,-276"/>
<polyline fill="none" stroke="black" points="1988,-281 1983,-281 "/>
</g>
<!-- v0.models.group.GenericGroup&#45;&gt;v0.models.dimension.Dimension -->
<g id="edge14" class="edge">
<title>v0.models.group.GenericGroup:e&#45;&gt;v0.models.dimension.Dimension:w</title>
<path fill="none" stroke="black" d="M1877,-259C2079.97,-259 1832.73,-678.92 2008.01,-704.76"/>
<polyline fill="none" stroke="black" points="2026,-706 2021.01,-705.66 "/>
<polygon fill="black" stroke="black" points="2020.36,-700.6 2019.67,-710.57 2017.67,-710.44 2018.36,-700.46 2020.36,-700.6"/>
<polyline fill="none" stroke="black" points="2021.01,-705.66 2016.02,-705.31 "/>
<ellipse fill="none" stroke="black" cx="2012.03" cy="-705.04" rx="4" ry="4"/>
</g>
<!-- v0.models.group.GenericGroup&#45;&gt;v0.models.group.GenericGroup -->
<g id="edge15" class="edge">
<title>v0.models.group.GenericGroup:e&#45;&gt;v0.models.group.GenericGroup:w</title>
<path fill="none" stroke="black" d="M1877.5,-217C1970,-250 1970,-369 1728,-369 1502.54,-369 1487.13,-348.17 1560.87,-327.53"/>
<polyline fill="none" stroke="black" points="1578.5,-323 1573.66,-324.25 "/>
<polygon fill="black" stroke="black" points="1571.44,-319.65 1573.93,-329.34 1572,-329.83 1569.51,-320.15 1571.44,-319.65"/>
<polyline fill="none" stroke="black" points="1573.66,-324.25 1568.81,-325.49 "/>
<ellipse fill="none" stroke="black" cx="1564.94" cy="-326.49" rx="4" ry="4"/>
</g>
<!-- v0.models.group.GenericGroup&#45;&gt;v0.models.variable.Variable -->
<g id="edge17" class="edge">
<title>v0.models.group.GenericGroup:e&#45;&gt;v0.models.variable.Variable:w</title>
<path fill="none" stroke="black" d="M1877,-238C1931.53,-238 1925.98,-170.08 1967.13,-154.96"/>
<polygon fill="black" stroke="black" points="1975.13,-153.63 1985.74,-156.44 1980.07,-152.82 1985,-152 1985,-152 1985,-152 1980.07,-152.82 1984.26,-147.56 1975.13,-153.63 1975.13,-153.63"/>
<ellipse fill="none" stroke="black" cx="1971.19" cy="-154.29" rx="4" ry="4"/>
</g>
<!-- v0.models.group.GroupMeta -->
<g id="node15" class="node">
<title>v0.models.group.GroupMeta</title>
<g id="a_node15"><a xlink:title="v0.models.group.GroupMeta&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="2050,-847 2050,-868 2146,-868 2146,-847 2050,-847"/>
<text text-anchor="start" x="2053" y="-854.8" font-family="Times,serif" font-weight="bold" font-size="14.00">GroupMeta</text>
<polygon fill="none" stroke="black" points="2050,-826 2050,-847 2107,-847 2107,-826 2050,-826"/>
<text text-anchor="start" x="2058.5" y="-832.8" font-family="Times,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="2107,-826 2107,-847 2146,-847 2146,-826 2107,-826"/>
<text text-anchor="start" x="2116" y="-832.8" font-family="Times,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- v0.models.group.GenericGroup&#45;&gt;v0.models.group.GroupMeta -->
<g id="edge16" class="edge">
<title>v0.models.group.GenericGroup:e&#45;&gt;v0.models.group.GroupMeta:w</title>
<path fill="none" stroke="black" d="M1877,-302C2130.36,-302 1804.24,-835.43 2033.84,-857.31"/>
<polyline fill="none" stroke="black" points="2049,-858 2044.01,-857.77 "/>
<polygon fill="black" stroke="black" points="2043.23,-852.73 2042.78,-862.72 2040.78,-862.63 2041.24,-852.64 2043.23,-852.73"/>
<polyline fill="none" stroke="black" points="2044.01,-857.77 2039.01,-857.54 "/>
<polygon fill="black" stroke="black" points="2038.24,-852.5 2037.78,-862.49 2035.79,-862.4 2036.24,-852.41 2038.24,-852.5"/>
<polyline fill="none" stroke="black" points="2039.01,-857.54 2034.02,-857.32 "/>
</g>
<!-- v0.models.group.ImagerGroup&#45;&gt;v0.attributes.group_attributes.ImagerGroupAttributes -->
<g id="edge18" class="edge">
<title>v0.models.group.ImagerGroup:e&#45;&gt;v0.attributes.group_attributes.ImagerGroupAttributes:w</title>
<path fill="none" stroke="black" d="M1045,-524C1162.16,-524 1042.14,-755.69 1138,-776.51"/>
<polyline fill="none" stroke="black" points="1153,-778 1148.02,-777.51 "/>
<polygon fill="black" stroke="black" points="1147.52,-772.43 1146.53,-782.38 1144.54,-782.18 1145.53,-772.23 1147.52,-772.43"/>
<polyline fill="none" stroke="black" points="1148.02,-777.51 1143.05,-777.01 "/>
<polygon fill="black" stroke="black" points="1142.55,-771.94 1141.56,-781.89 1139.57,-781.69 1140.56,-771.74 1142.55,-771.94"/>
<polyline fill="none" stroke="black" points="1143.05,-777.01 1138.07,-776.52 "/>
</g>
<!-- v0.models.group.ImagerGroup&#45;&gt;v0.models.dimension.Dimension -->
<g id="edge19" class="edge">
<title>v0.models.group.ImagerGroup:e&#45;&gt;v0.models.dimension.Dimension:w</title>
<path fill="none" stroke="black" d="M1045,-502C1234.64,-502 1283.76,-504.25 1470,-540 1717.21,-587.45 1765.85,-700.42 2007.85,-705.8"/>
<polyline fill="none" stroke="black" points="2026,-706 2021,-705.95 "/>
<polygon fill="black" stroke="black" points="2020.06,-700.93 2019.95,-710.93 2017.95,-710.91 2018.06,-700.91 2020.06,-700.93"/>
<polyline fill="none" stroke="black" points="2021,-705.95 2016,-705.89 "/>
<ellipse fill="none" stroke="black" cx="2012" cy="-705.85" rx="4" ry="4"/>
</g>
<!-- v0.models.group.ImagerGroup&#45;&gt;v0.models.group.GenericGroup -->
<g id="edge21" class="edge">
<title>v0.models.group.ImagerGroup:e&#45;&gt;v0.models.group.GenericGroup:w</title>
<path fill="none" stroke="black" d="M1045,-481C1137.53,-481 1072.36,-348.39 1153,-303 1275.77,-233.89 1329.7,-290.12 1470,-303 1511.97,-306.85 1525.58,-318.96 1559.93,-322.2"/>
<polygon fill="black" stroke="black" points="1568.01,-322.56 1577.8,-327.5 1573,-322.78 1578,-323 1578,-323 1578,-323 1573,-322.78 1578.2,-318.5 1568.01,-322.56 1568.01,-322.56"/>
<ellipse fill="none" stroke="black" cx="1564.01" cy="-322.38" rx="4" ry="4"/>
</g>
<!-- v0.models.group.ImagerGroup&#45;&gt;v0.models.variable.Variable -->
<g id="edge23" class="edge">
<title>v0.models.group.ImagerGroup:e&#45;&gt;v0.models.variable.Variable:w</title>
<path fill="none" stroke="black" d="M1045,-460C1146.02,-460 1075.05,-324.26 1153,-260 1305.71,-134.1 1382.35,-156.9 1578,-127 1709.36,-106.93 1744.97,-111.92 1877,-127 1919.26,-131.83 1932.32,-146.95 1966.81,-151"/>
<polygon fill="black" stroke="black" points="1975.02,-151.45 1984.75,-156.49 1980.01,-151.72 1985,-152 1985,-152 1985,-152 1980.01,-151.72 1985.25,-147.51 1975.02,-151.45 1975.02,-151.45"/>
<ellipse fill="none" stroke="black" cx="1971.02" cy="-151.23" rx="4" ry="4"/>
</g>
<!-- v0.models.group.CoreGroup -->
<g id="node14" class="node">
<title>v0.models.group.CoreGroup</title>
<g id="a_node14"><a xlink:title="v0.models.group.CoreGroup&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="1162.5,-426 1162.5,-447 1461.5,-447 1461.5,-426 1162.5,-426"/>
<text text-anchor="start" x="1269" y="-433.8" font-family="Times,serif" font-weight="bold" font-size="14.00">CoreGroup</text>
<polygon fill="none" stroke="black" points="1162.5,-405 1162.5,-426 1250.5,-426 1250.5,-405 1162.5,-405"/>
<text text-anchor="start" x="1188" y="-411.8" font-family="Times,serif" font-size="14.00">meta</text>
<polygon fill="none" stroke="black" points="1250.5,-405 1250.5,-426 1461.5,-426 1461.5,-405 1250.5,-405"/>
<text text-anchor="start" x="1315" y="-411.8" font-family="Times,serif" font-size="14.00">GroupMeta</text>
<polygon fill="none" stroke="black" points="1162.5,-384 1162.5,-405 1250.5,-405 1250.5,-384 1162.5,-384"/>
<text text-anchor="start" x="1170.5" y="-390.8" font-family="Times,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="1250.5,-384 1250.5,-405 1461.5,-405 1461.5,-384 1250.5,-384"/>
<text text-anchor="start" x="1280.5" y="-390.8" font-family="Times,serif" font-size="14.00">CoreGroupAttributes</text>
<polygon fill="none" stroke="black" points="1162.5,-363 1162.5,-384 1250.5,-384 1250.5,-363 1162.5,-363"/>
<text text-anchor="start" x="1165.5" y="-369.8" font-family="Times,serif" font-size="14.00">dimensions</text>
<polygon fill="none" stroke="black" points="1250.5,-363 1250.5,-384 1461.5,-384 1461.5,-363 1250.5,-363"/>
<text text-anchor="start" x="1265.5" y="-369.8" font-family="Times,serif" font-size="14.00">Optional[list[Dimension]]</text>
<polygon fill="none" stroke="black" points="1162.5,-342 1162.5,-363 1250.5,-363 1250.5,-342 1162.5,-342"/>
<text text-anchor="start" x="1173.5" y="-348.8" font-family="Times,serif" font-size="14.00">variables</text>
<polygon fill="none" stroke="black" points="1250.5,-342 1250.5,-363 1461.5,-363 1461.5,-342 1250.5,-342"/>
<text text-anchor="start" x="1310" y="-348.8" font-family="Times,serif" font-size="14.00">list[Variable]</text>
<polygon fill="none" stroke="black" points="1162.5,-321 1162.5,-342 1250.5,-342 1250.5,-321 1162.5,-321"/>
<text text-anchor="start" x="1181.5" y="-327.8" font-family="Times,serif" font-size="14.00">groups</text>
<polygon fill="none" stroke="black" points="1250.5,-321 1250.5,-342 1461.5,-342 1461.5,-321 1250.5,-321"/>
<text text-anchor="start" x="1253.5" y="-327.8" font-family="Times,serif" font-size="14.00">Optional[list[GenericGroup]]</text>
</a>
</g>
</g>
<!-- v0.models.group.ImagerGroup&#45;&gt;v0.models.group.CoreGroup -->
<g id="edge20" class="edge">
<title>v0.models.group.ImagerGroup:e&#45;&gt;v0.models.group.CoreGroup:w</title>
<path fill="none" stroke="black" d="M1045,-481C1093.65,-481 1104.02,-447.01 1143.4,-438.78"/>
<polygon fill="black" stroke="black" points="1151.55,-437.98 1161.94,-441.48 1156.52,-437.49 1161.5,-437 1161.5,-437 1161.5,-437 1156.52,-437.49 1161.06,-432.52 1151.55,-437.98 1151.55,-437.98"/>
<ellipse fill="none" stroke="black" cx="1147.57" cy="-438.37" rx="4" ry="4"/>
</g>
<!-- v0.models.group.ImagerGroup&#45;&gt;v0.models.group.GroupMeta -->
<g id="edge22" class="edge">
<title>v0.models.group.ImagerGroup:e&#45;&gt;v0.models.group.GroupMeta:w</title>
<path fill="none" stroke="black" d="M1045,-545C1239.46,-545 999.46,-849.67 1153,-969 1214.22,-1016.58 1860.52,-939.24 1877,-935 1952.88,-915.45 1964.02,-865.09 2033.72,-858.67"/>
<polyline fill="none" stroke="black" points="2049,-858 2044,-858.22 "/>
<polygon fill="black" stroke="black" points="2042.79,-853.27 2043.23,-863.26 2041.23,-863.35 2040.79,-853.36 2042.79,-853.27"/>
<polyline fill="none" stroke="black" points="2044,-858.22 2039.01,-858.44 "/>
<polygon fill="black" stroke="black" points="2037.79,-853.49 2038.23,-863.48 2036.23,-863.57 2035.79,-853.58 2037.79,-853.49"/>
<polyline fill="none" stroke="black" points="2039.01,-858.44 2034.01,-858.66 "/>
</g>
<!-- v0.models.group.PlatformGroup&#45;&gt;v0.attributes.group_attributes.PlatformGroupAttributes -->
<g id="edge24" class="edge">
<title>v0.models.group.PlatformGroup:e&#45;&gt;v0.attributes.group_attributes.PlatformGroupAttributes:w</title>
<path fill="none" stroke="black" d="M1462.5,-899C1527.08,-899 1544.11,-871.69 1601.45,-867.53"/>
<polyline fill="none" stroke="black" points="1616.5,-867 1611.5,-867.18 "/>
<polygon fill="black" stroke="black" points="1610.33,-862.21 1610.68,-872.21 1608.68,-872.28 1608.33,-862.28 1610.33,-862.21"/>
<polyline fill="none" stroke="black" points="1611.5,-867.18 1606.51,-867.35 "/>
<polygon fill="black" stroke="black" points="1605.33,-862.39 1605.68,-872.38 1603.68,-872.45 1603.33,-862.46 1605.33,-862.39"/>
<polyline fill="none" stroke="black" points="1606.51,-867.35 1601.51,-867.53 "/>
</g>
<!-- v0.models.group.PlatformGroup&#45;&gt;v0.models.dimension.Dimension -->
<g id="edge25" class="edge">
<title>v0.models.group.PlatformGroup:e&#45;&gt;v0.models.dimension.Dimension:w</title>
<path fill="none" stroke="black" d="M1462.5,-877C1520.35,-877 1523.88,-837.43 1578,-817 1622.09,-800.35 1920.16,-720.57 2007.99,-707.74"/>
<polyline fill="none" stroke="black" points="2026,-706 2021.02,-706.48 "/>
<polygon fill="black" stroke="black" points="2019.55,-701.6 2020.51,-711.55 2018.52,-711.75 2017.56,-701.79 2019.55,-701.6"/>
<polyline fill="none" stroke="black" points="2021.02,-706.48 2016.05,-706.96 "/>
<ellipse fill="none" stroke="black" cx="2012.06" cy="-707.35" rx="4" ry="4"/>
</g>
<!-- v0.models.group.PlatformGroup&#45;&gt;v0.models.group.GenericGroup -->
<g id="edge26" class="edge">
<title>v0.models.group.PlatformGroup:e&#45;&gt;v0.models.group.GenericGroup:w</title>
<path fill="none" stroke="black" d="M1462.5,-835C1689.28,-835 1363.81,-351.1 1559.86,-324.17"/>
<polyline fill="none" stroke="black" points="1578,-323 1573.01,-323.32 "/>
<polygon fill="black" stroke="black" points="1571.69,-318.4 1572.33,-328.38 1570.34,-328.5 1569.7,-318.52 1571.69,-318.4"/>
<polyline fill="none" stroke="black" points="1573.01,-323.32 1568.02,-323.64 "/>
<ellipse fill="none" stroke="black" cx="1564.03" cy="-323.9" rx="4" ry="4"/>
</g>
<!-- v0.models.group.PlatformGroup&#45;&gt;v0.models.variable.Variable -->
<g id="edge28" class="edge">
<title>v0.models.group.PlatformGroup:e&#45;&gt;v0.models.variable.Variable:w</title>
<path fill="none" stroke="black" d="M1462.5,-856C1539.13,-856 1520.45,-778.59 1578,-728 1699.39,-621.29 1782.43,-652.07 1877,-521 1973.17,-387.7 1826.14,-169.42 1966.89,-152.98"/>
<polygon fill="black" stroke="black" points="1975.01,-152.54 1985.24,-156.49 1980.01,-152.27 1985,-152 1985,-152 1985,-152 1980.01,-152.27 1984.76,-147.51 1975.01,-152.54 1975.01,-152.54"/>
<ellipse fill="none" stroke="black" cx="1971.02" cy="-152.76" rx="4" ry="4"/>
</g>
<!-- v0.models.group.PlatformGroup&#45;&gt;v0.models.group.GroupMeta -->
<g id="edge27" class="edge">
<title>v0.models.group.PlatformGroup:e&#45;&gt;v0.models.group.GroupMeta:w</title>
<path fill="none" stroke="black" d="M1462.5,-920C1647.06,-920 1694.15,-920.03 1877,-895 1949.17,-885.12 1968.29,-861.53 2033.79,-858.36"/>
<polyline fill="none" stroke="black" points="2049,-858 2044,-858.12 "/>
<polygon fill="black" stroke="black" points="2042.88,-853.14 2043.12,-863.14 2041.12,-863.19 2040.88,-853.19 2042.88,-853.14"/>
<polyline fill="none" stroke="black" points="2044,-858.12 2039,-858.23 "/>
<polygon fill="black" stroke="black" points="2037.89,-853.26 2038.12,-863.26 2036.12,-863.3 2035.89,-853.31 2037.89,-853.26"/>
<polyline fill="none" stroke="black" points="2039,-858.23 2034,-858.35 "/>
</g>
<!-- v0.models.variable.Variable&#45;&gt;v0.attributes.variable_attributes.VariableAttributes -->
<g id="edge29" class="edge">
<title>v0.models.variable.Variable:e&#45;&gt;v0.attributes.variable_attributes.VariableAttributes:w</title>
<path fill="none" stroke="black" d="M2211,-88C2256.32,-88 2266.22,-57.86 2303.79,-51.26"/>
<polyline fill="none" stroke="black" points="2319,-50 2314.02,-50.41 "/>
<polygon fill="black" stroke="black" points="2312.61,-45.51 2313.43,-55.48 2311.44,-55.65 2310.61,-45.68 2312.61,-45.51"/>
<polyline fill="none" stroke="black" points="2314.02,-50.41 2309.03,-50.83 "/>
<polygon fill="black" stroke="black" points="2307.62,-45.93 2308.45,-55.89 2306.46,-56.06 2305.63,-46.09 2307.62,-45.93"/>
<polyline fill="none" stroke="black" points="2309.03,-50.83 2304.05,-51.24 "/>
</g>
<!-- v0.models.variable.VariableMeta -->
<g id="node16" class="node">
<title>v0.models.variable.VariableMeta</title>
<g id="a_node16"><a xlink:title="v0.models.variable.VariableMeta&#10;&#10;Usage docs: https://docs.pydantic.dev/2.6/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;datatype (str): The type of the data&#10;">
<polygon fill="none" stroke="black" points="2370,-159 2370,-180 2482,-180 2482,-159 2370,-159"/>
<text text-anchor="start" x="2373" y="-166.8" font-family="Times,serif" font-weight="bold" font-size="14.00">VariableMeta</text>
<polygon fill="none" stroke="black" points="2370,-138 2370,-159 2442,-159 2442,-138 2370,-138"/>
<text text-anchor="start" x="2374" y="-144.8" font-family="Times,serif" font-size="14.00">datatype</text>
<polygon fill="none" stroke="black" points="2442,-138 2442,-159 2482,-159 2482,-138 2442,-138"/>
<text text-anchor="start" x="2451.5" y="-144.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="2370,-117 2370,-138 2442,-138 2442,-117 2370,-117"/>
<text text-anchor="start" x="2386" y="-123.8" font-family="Times,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="2442,-117 2442,-138 2482,-138 2482,-117 2442,-117"/>
<text text-anchor="start" x="2451.5" y="-123.8" font-family="Times,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="2370,-96 2370,-117 2442,-117 2442,-96 2370,-96"/>
<text text-anchor="start" x="2375" y="-102.8" font-family="Times,serif" font-size="14.00">required</text>
<polygon fill="none" stroke="black" points="2442,-96 2442,-117 2482,-117 2482,-96 2442,-96"/>
<text text-anchor="start" x="2446.5" y="-102.8" font-family="Times,serif" font-size="14.00">bool</text>
</a>
</g>
</g>
<!-- v0.models.variable.Variable&#45;&gt;v0.models.variable.VariableMeta -->
<g id="edge30" class="edge">
<title>v0.models.variable.Variable:e&#45;&gt;v0.models.variable.VariableMeta:w</title>
<path fill="none" stroke="black" d="M2211,-131C2277.96,-131 2294.37,-164.43 2353.82,-169.39"/>
<polyline fill="none" stroke="black" points="2369,-170 2364,-169.8 "/>
<polygon fill="black" stroke="black" points="2363.21,-164.76 2362.8,-174.75 2360.8,-174.67 2361.21,-164.68 2363.21,-164.76"/>
<polyline fill="none" stroke="black" points="2364,-169.8 2359.01,-169.6 "/>
<polygon fill="black" stroke="black" points="2358.21,-164.56 2357.81,-174.55 2355.81,-174.47 2356.21,-164.48 2358.21,-164.56"/>
<polyline fill="none" stroke="black" points="2359.01,-169.6 2354.01,-169.39 "/>
</g>
<!-- v0.models.group.CoreGroup&#45;&gt;v0.attributes.group_attributes.CoreGroupAttributes -->
<g id="edge8" class="edge">
<title>v0.models.group.CoreGroup:e&#45;&gt;v0.attributes.group_attributes.CoreGroupAttributes:w</title>
<path fill="none" stroke="black" d="M1462.5,-395C1543.9,-395 1544.9,-481.13 1616.25,-491.9"/>
<polyline fill="none" stroke="black" points="1631.5,-493 1626.51,-492.64 "/>
<polygon fill="black" stroke="black" points="1625.88,-487.58 1625.16,-497.56 1623.16,-497.41 1623.88,-487.44 1625.88,-487.58"/>
<polyline fill="none" stroke="black" points="1626.51,-492.64 1621.53,-492.28 "/>
<polygon fill="black" stroke="black" points="1620.89,-487.22 1620.17,-497.2 1618.17,-497.05 1618.89,-487.08 1620.89,-487.22"/>
<polyline fill="none" stroke="black" points="1621.53,-492.28 1616.54,-491.92 "/>
</g>
<!-- v0.models.group.CoreGroup&#45;&gt;v0.models.dimension.Dimension -->
<g id="edge9" class="edge">
<title>v0.models.group.CoreGroup:e&#45;&gt;v0.models.dimension.Dimension:w</title>
<path fill="none" stroke="black" d="M1462.5,-373C1555.92,-373 1800.5,-389.38 1877,-443 1981.64,-516.34 1900.48,-688.11 2007.91,-704.7"/>
<polyline fill="none" stroke="black" points="2026,-706 2021.01,-705.64 "/>
<polygon fill="black" stroke="black" points="2020.37,-700.58 2019.66,-710.56 2017.66,-710.42 2018.38,-700.44 2020.37,-700.58"/>
<polyline fill="none" stroke="black" points="2021.01,-705.64 2016.03,-705.29 "/>
<ellipse fill="none" stroke="black" cx="2012.04" cy="-705" rx="4" ry="4"/>
</g>
<!-- v0.models.group.CoreGroup&#45;&gt;v0.models.group.GenericGroup -->
<g id="edge10" class="edge">
<title>v0.models.group.CoreGroup:e&#45;&gt;v0.models.group.GenericGroup:w</title>
<path fill="none" stroke="black" d="M1462.5,-331C1507.32,-331 1522.65,-324.93 1559.87,-323.36"/>
<polyline fill="none" stroke="black" points="1578,-323 1573,-323.1 "/>
<polygon fill="black" stroke="black" points="1571.9,-318.12 1572.1,-328.12 1570.1,-328.16 1569.9,-318.16 1571.9,-318.12"/>
<polyline fill="none" stroke="black" points="1573,-323.1 1568,-323.2 "/>
<ellipse fill="none" stroke="black" cx="1564" cy="-323.28" rx="4" ry="4"/>
</g>
<!-- v0.models.group.CoreGroup&#45;&gt;v0.models.variable.Variable -->
<g id="edge12" class="edge">
<title>v0.models.group.CoreGroup:e&#45;&gt;v0.models.variable.Variable:w</title>
<path fill="none" stroke="black" d="M1462.5,-352C1551.29,-352 1501.06,-233.31 1578,-189 1730.02,-101.45 1798.61,-148.5 1966.77,-151.82"/>
<polygon fill="black" stroke="black" points="1975,-151.9 1984.96,-156.5 1980,-151.95 1985,-152 1985,-152 1985,-152 1980,-151.95 1985.04,-147.5 1975,-151.9 1975,-151.9"/>
<ellipse fill="none" stroke="black" cx="1971" cy="-151.86" rx="4" ry="4"/>
</g>
<!-- v0.models.group.CoreGroup&#45;&gt;v0.models.group.GroupMeta -->
<g id="edge11" class="edge">
<title>v0.models.group.CoreGroup:e&#45;&gt;v0.models.group.GroupMeta:w</title>
<path fill="none" stroke="black" d="M1462.5,-416C1531.87,-416 1524.03,-477.41 1578,-521 1674.31,-598.79 1902.06,-838.74 2033.82,-856.91"/>
<polyline fill="none" stroke="black" points="2049,-858 2044.01,-857.64 "/>
<polygon fill="black" stroke="black" points="2043.37,-852.58 2042.66,-862.56 2040.66,-862.41 2041.38,-852.44 2043.37,-852.58"/>
<polyline fill="none" stroke="black" points="2044.01,-857.64 2039.03,-857.28 "/>
<polygon fill="black" stroke="black" points="2038.39,-852.22 2037.67,-862.2 2035.68,-862.06 2036.39,-852.08 2038.39,-852.22"/>
<polyline fill="none" stroke="black" points="2039.03,-857.28 2034.04,-856.93 "/>
</g>
</g>
</svg>
